swagger: "2.0"
info:
  title: Skin Care Sale System API
  description: API for Skin Care Sale System
  version: 1.0.0
host: localhost:8080
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Register a new user
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: User object
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
              confirmPassword:
                type: string
                format: password
      responses:
        201:
          description: User created
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  _id:
                    type: string
                  email:
                    type: string
                  password:
                    type: string
                  __v:
                    type: integer
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    param:
                      type: string
                    msg:
                      type: string
  /auth/login:
    post:
      summary: Login to the system
      description: Login to the system
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: User object
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
      responses:
        200:
          description: Login successful
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  _id:
                    type: string
                  email:
                    type: string
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    param:
                      type: string
                    msg:
                      type: string
  /auth/verify-email:
    get:
      summary: Verify email
      description: Verify email
      parameters:
        - in: query
          name: token
          description: Verification token
          required: true
          type: string
        - in: query
          name: userId
          description: User ID
          required: true
          type: string
      responses:
        200:
          description: Email verified
          schema:
            type: object
            properties:
              message:
                type: string
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    param:
                      type: string
                    msg:
                      type: string

  /products:
    get:
      summary: Get all products
      description: Retrieve a list of all products
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        500:
          description: Internal server error

    post:
      summary: Create a new product
      description: Add a new product to the database
      parameters:
        - in: body
          name: product
          description: Product object to be created
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        201:
          description: Product created successfully
        400:
          description: Invalid input
        500:
          description: Internal server error

  /products/{id}:
    get:
      summary: Get product by ID
      description: Retrieve a product by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Product ID
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Product'
        404:
          description: Product not found
        500:
          description: Internal server error

    put:
      summary: Update product by ID
      description: Update the details of an existing product
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Product ID
        - in: body
          name: product
          description: Updated product object
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        200:
          description: Product updated successfully
        400:
          description: Invalid input
        404:
          description: Product not found
        500:
          description: Internal server error

    delete:
      summary: Delete product by ID
      description: Remove a product from the database
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Product ID
      responses:
        200:
          description: Product deleted successfully
        404:
          description: Product not found
        500:
          description: Internal server error

definitions:
  Product:
    type: object
    properties:
      name:
        type: string
        example: "Facial Cleanser"
      ingredient:
        type: string
        example: "Aloe Vera, Vitamin E"
      category:
        type: string
        example: "Skincare"
      stock:
        type: integer
        example: 100
      image:
        type: string
        example: "https://example.com/product.jpg"
      rating:
        type: number
        format: float
        example: 4.5
      purchaseCount:
        type: integer
        example: 50
      description:
        type: string
        example: "A gentle cleanser for all skin types."
      isDisabled:
        type: boolean
        example: false
