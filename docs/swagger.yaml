swagger: "2.0"
info:
  title: Skin Care Sale System API
  description: API for Skin Care Sale System
  version: 1.0.0
host: localhost:8080
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization: Bearer {token}"'

tags:
  - name: Authentication
  - name: Products
  - name: Users
  - name: Promotions
  - name: Cart
  - name: Quiz
    description: Operations related to quizzes

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Register a new user
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: User object
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
              confirmPassword:
                type: string
                format: password
      responses:
        201:
          description: User created
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  _id:
                    type: string
                  email:
                    type: string
                  password:
                    type: string
                  __v:
                    type: integer
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    param:
                      type: string
                    msg:
                      type: string

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login to the system
      description: Login to the system
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: User object
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
      responses:
        200:
          description: Login successful
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  _id:
                    type: string
                  email:
                    type: string
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    param:
                      type: string
                    msg:
                      type: string

  /auth/verify-email/{tokenVerify}/{id}:
    get:
      tags:
        - Authentication
      summary: Verify email
      description: Verify email
      parameters:
        - in: path
          name: tokenVerify
          description: Verification token
          required: true
          type: string
        - in: path
          name: id
          description: User ID
          required: true
          type: string
      responses:
        200:
          description: Email verified
          schema:
            type: object
            properties:
              message:
                type: string
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    param:
                      type: string
                    msg:
                      type: string

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Send reset password email
      description: Send reset password email
      consumes:
        - application/json
      parameters:
        - in: body
          name: email
          description: User email
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
      responses:
        200:
          description: Reset password email sent
          schema:
            type: object
            properties:
              message:
                type: string
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    param:
                      type: string
                    msg:
                      type: string

  /auth/verify-reset-password/{token}/{userId}:
    post:
      tags:
        - Authentication
      summary: Verify reset password
      description: Verify reset password
      consumes:
        - application/json
      parameters:
        - in: path
          name: token
          description: Reset token
          required: true
          type: string
        - in: path
          name: userId
          description: User ID
          required: true
          type: string
        - in: body
          name: passwords
          description: New passwords
          schema:
            type: object
            properties:
              newPassword:
                type: string
                format: password
              confirmNewPassword:
                type: string
                format: password
      responses:
        200:
          description: Password updated successfully
          schema:
            type: object
            properties:
              message:
                type: string
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    param:
                      type: string
                    msg:
                      type: string
  /promotions:
    get:
      tags:
        - Promotions
      summary: Get all promotions
      description: Retrieve a list of all promotions
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Promotion"
    post:
      tags:
        - Promotions
      summary: Create a new promotion
      description: Add a new promotion to the system
      parameters:
        - in: body
          name: promotion
          description: Promotion object to be created
          required: true
          schema:
            $ref: "#/definitions/Promotion"
      responses:
        201:
          description: Promotion created successfully
        400:
          description: Invalid input

  /promotions/{id}:
    get:
      tags:
        - Promotions
      summary: Get promotion by ID
      description: Retrieve a promotion by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Promotion ID
      responses:
        200:
          description: Successful operation
          schema:
            $ref: "#/definitions/Promotion"
        404:
          description: Promotion not found

    put:
      tags:
        - Promotions
      summary: Update promotion by ID
      description: Update the details of an existing promotion
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Promotion ID
        - in: body
          name: promotion
          description: Updated promotion object
          required: true
          schema:
            $ref: "#/definitions/Promotion"
      responses:
        200:
          description: Promotion updated successfully
        400:
          description: Invalid input
        404:
          description: Promotion not found

    delete:
      tags:
        - Promotions
      summary: Delete promotion by ID
      description: Remove a promotion from the system
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Promotion ID
      responses:
        200:
          description: Promotion deleted successfully
        404:
          description: Promotion not found

  /cart/{customerId}:
    get:
      tags:
        - Cart
      summary: Get customer's cart
      description: Retrieve the current cart of a customer
      parameters:
        - in: query
          name: customerId
          required: true
          type: string
          description: Customer ID
      responses:
        200:
          description: Cart retrieved successfully
          schema:
            $ref: "#/definitions/Cart"
        404:
          description: Cart not found

  /cart/add:
    post:
      tags:
        - Cart
      summary: Add a product to the cart
      description: Add a specified quantity of a product to the customer's cart
      parameters:
        - in: body
          name: cartItem
          required: true
          schema:
            $ref: "#/definitions/AddToCartRequest"
      responses:
        200:
          description: Product added to cart successfully
        400:
          description: Invalid input

  /cart/apply-promotion:
    post:
      tags:
        - Cart
      summary: Apply a promotion code
      description: Apply a discount code to the customer's cart
      parameters:
        - in: body
          name: promotion
          required: true
          schema:
            $ref: "#/definitions/ApplyPromotionRequest"
      responses:
        200:
          description: Promotion applied successfully
        400:
          description: Invalid promotion code or expired
  /cart/remove-item:
    put:
      tags:
        - Cart
      summary: Remove a product from the cart
      description: Remove a product from the customer's cart
      parameters:
        - in: query
          name: customerId
          required: true
          type: string
          description: Customer ID
        - in: query
          name: productId
          required: true
          type: string
          description: Product ID
      responses:
        200:
          description: Product removed from cart successfully
        404:
          description: Product not found
  /cart/clear:
    post:
      tags:
        - Cart
      summary: Clear the cart
      description: Remove all items from the customer's cart
      parameters:
        - in: query
          name: customerId
          required: true
          type: string
          description: Customer ID
      responses:
        200:
          description: Cart cleared successfully
        404:
          description: Cart not found

  /products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve a list of all products
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"
        500:
          description: Internal server error

    post:
      tags:
        - Products
      summary: Create a new product
      description: Add a new product to the database
      parameters:
        - in: body
          name: product
          description: Product object to be created
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        201:
          description: Product created successfully
        400:
          description: Invalid input
        500:
          description: Internal server error

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve a product by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Product ID
      responses:
        200:
          description: Successful operation
          schema:
            $ref: "#/definitions/Product"
        404:
          description: Product not found
        500:
          description: Internal server error

    put:
      tags:
        - Products
      summary: Update product by ID
      description: Update the details of an existing product
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Product ID
        - in: body
          name: product
          description: Updated product object
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        200:
          description: Product updated successfully
        400:
          description: Invalid input
        404:
          description: Product not found
        500:
          description: Internal server error

    delete:
      tags:
        - Products
      summary: Delete product by ID
      description: Remove a product from the database
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Product ID
      responses:
        200:
          description: Product deleted successfully
        404:
          description: Product not found
        500:
          description: Internal server error

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users from the system.
      operationId: getAllUsers
      produces:
        - application/json
      security:
        - Bearer: []
      responses:
        200:
          description: Users retrieved successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Get all users successfully"
              data:
                type: array
                items:
                  $ref: "#/definitions/User"
        404:
          description: No users found
          schema:
            type: object
            properties:
              message:
                type: string
                example: "No users found"
        500:
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Internal server error"

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a user by their ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: User ID
      responses:
        200:
          description: Get user by ID successfully
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                $ref: "#/definitions/User"
        404:
          description: User not found
          schema:
            type: object
            properties:
              message:
                type: string
        500:
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string

    put:
      tags:
        - Users
      summary: Update user by ID
      description: Update the details of an existing user
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: User ID
        - in: body
          name: user
          description: Updated user object
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Update user by ID successfully
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                $ref: "#/definitions/User"
        404:
          description: User not found
          schema:
            type: object
            properties:
              message:
                type: string
        500:
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string

  /users/create-employee:
    post:
      tags:
        - Users
      summary: Create a new employee
      description: Add a new employee to the system
      parameters:
        - in: body
          name: employee
          description: Employee object to be created
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: Employee created successfully
        400:
          description: Invalid input

  /users/delete/{id}:
    put:
      tags:
        - Users
      summary: Delete user by ID
      description: Remove a user from the system
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: User ID
      responses:
        200:
          description: User deleted successfully
        404:
          description: User not found
        500:
          description: Internal server error

  /questions:
    get:
      tags:
        - Quiz
      summary: Get all questions
      description: Retrieve a list of all quiz questions
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Question"
        500:
          description: Internal server error

  /answers/{questionId}:
    get:
      tags:
        - Quiz
      summary: Get answers for a specific question
      parameters:
        - name: questionId
          in: path
          required: true
          type: string
          description: ID of the question
      responses:
        200:
          description: Successful operation
          schema:
            $ref: "#/definitions/Answer"
        404:
          description: Question not found
        500:
          description: Internal server error

  /results/{userId}:
    get:
      tags:
        - Quiz
      summary: Get quiz results for a user
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: ID of the user
      responses:
        200:
          description: Successful operation
          schema:
            $ref: "#/definitions/QuizResult"
        404:
          description: User not found
        500:
          description: Internal server error

  /create:
    post:
      tags:
        - Quiz
      summary: Create a new question
      parameters:
        - in: body
          name: question
          required: true
          schema:
            $ref: "#/definitions/QuestionInput"
      responses:
        201:
          description: Question created successfully
        400:
          description: Invalid input
        500:
          description: Internal server error

  /submit:
    post:
      tags:
        - Quiz
      summary: Submit an answer to a question
      parameters:
        - in: body
          name: submission
          required: true
          schema:
            $ref: "#/definitions/QuizSubmission"
      responses:
        200:
          description: Answer submitted successfully
        400:
          description: Invalid submission
        500:
          description: Internal server error

  /update/{questionId}:
    put:
      tags:
        - Quiz
      summary: Update an existing question
      parameters:
        - name: questionId
          in: path
          required: true
          type: string
          description: ID of the question to update
        - in: body
          name: question
          required: true
          schema:
            $ref: "#/definitions/QuestionInput"
      responses:
        200:
          description: Question updated successfully
        404:
          description: Question not found
        500:
          description: Internal server error

  /delete/{questionId}:
    put:
      tags:
        - Quiz
      summary: Delete a question (soft delete)
      parameters:
        - name: questionId
          in: path
          required: true
          type: string
          description: ID of the question to delete
      responses:
        200:
          description: Question deleted successfully
        404:
          description: Question not found
        500:
          description: Internal server error

definitions:
  Product:
    type: object
    properties:
      name:
        type: string
        example: "Facial Cleanser"
      ingredient:
        type: string
        example: "Aloe Vera, Vitamin E"
      category:
        type: string
        example: "Skincare"
      stock:
        type: integer
        example: 100
      image:
        type: string
        example: "https://example.com/product.jpg"
      rating:
        type: number
        format: float
        example: 4.5
      purchaseCount:
        type: integer
        example: 50
      description:
        type: string
        example: "A gentle cleanser for all skin types."
      isDisabled:
        type: boolean
        example: false

  User:
    type: object
    properties:
      _id:
        type: string
      email:
        type: string
      password:
        type: string
      __v:
        type: integer
  Promotion:
    type: object
    properties:
      name:
        type: string
        example: "Holiday Sale"
      code:
        type: string
        example: "HOLIDAY20"
      description:
        type: string
        example: "20% off for the holiday season"
      discount_percentage:
        type: number
        format: float
        example: 20.0
      start_date:
        type: string
        format: date-time
        example: "2025-02-01T00:00:00Z"
      end_date:
        type: string
        format: date-time
        example: "2025-02-28T23:59:59Z"
  CartItem:
    type: object
    properties:
      productId:
        type: string
        example: "60d5f9b5fc13ae21b8000000"
      quantity:
        type: integer
        example: 2
      priceAtTime:
        type: number
        example: 19.99

  Cart:
    type: object
    properties:
      customerId:
        type: string
        example: "60d5f9b5fc13ae21b8000001"
      items:
        type: array
        items:
          $ref: "#/definitions/CartItem"
      totalPrice:
        type: number
        example: 39.98
      discount:
        type: number
        example: 5.00
      finalPrice:
        type: number
        example: 34.98

  AddToCartRequest:
    type: object
    properties:
      customerId:
        type: string
        example: "60d5f9b5fc13ae21b8000001"
      productId:
        type: string
        example: "60d5f9b5fc13ae21b8000000"
      quantity:
        type: integer
        example: 1
  ApplyPromotionRequest:
    type: object
    properties:
      customerId:
        type: string
        example: "60d5f9b5fc13ae21b8000001"
      promoCode:
        type: string
        example: "DISCOUNT10"
  Question:
    type: object
    properties:
      _id:
        type: string
      text:
        type: string
      options:
        type: array
        items:
          type: string

  Answer:
    type: object
    properties:
      _id:
        type: string
      questionId:
        type: string
      text:
        type: string
      isCorrect:
        type: boolean

  QuestionInput:
    type: object
    required:
      - text
      - options
      - correctAnswer
    properties:
      text:
        type: string
      options:
        type: array
        items:
          type: string
      correctAnswer:
        type: string

  QuizSubmission:
    type: object
    required:
      - questionId
      - userId
      - answer
    properties:
      questionId:
        type: string
      userId:
        type: string
      answer:
        type: string

  QuizResult:
    type: object
    properties:
      userId:
        type: string
      totalQuestions:
        type: integer
      correctAnswers:
        type: integer
      score:
        type: number
      completedAt:
        type: string
        format: date-time
