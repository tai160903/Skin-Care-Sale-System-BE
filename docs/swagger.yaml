swagger: "2.0"
info:
  title: Skin Care Sale System API
  description: API for Skin Care Sale System
  version: 1.0.0
host: localhost:8080
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization: Bearer {token}"'

tags:
  - name: Authentication
  - name: Products
  - name: Users
  - name: Promotions
  - name: Cart
  - name: Quiz
  - name: Draft Order
  - name:  Orders
  - name: Shipping
  - name : Blog


paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Register a new user
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: User object
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
              confirmPassword:
                type: string
                format: password
      responses:
        201:
          description: User created
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  _id:
                    type: string
                  email:
                    type: string
                  password:
                    type: string
                  __v:
                    type: integer
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    param:
                      type: string
                    msg:
                      type: string

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login to the system
      description: Login to the system
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: User object
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
      responses:
        200:
          description: Login successful
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: object
                properties:
                  _id:
                    type: string
                  email:
                    type: string
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    param:
                      type: string
                    msg:
                      type: string

  /auth/verify-email/{tokenVerify}/{id}:
    get:
      tags:
        - Authentication
      summary: Verify email
      description: Verify email
      parameters:
        - in: path
          name: tokenVerify
          description: Verification token
          required: true
          type: string
        - in: path
          name: id
          description: User ID
          required: true
          type: string
      responses:
        200:
          description: Email verified
          schema:
            type: object
            properties:
              message:
                type: string
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    param:
                      type: string
                    msg:
                      type: string

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Send reset password email
      description: Send reset password email
      consumes:
        - application/json
      parameters:
        - in: body
          name: email
          description: User email
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
      responses:
        200:
          description: Reset password email sent
          schema:
            type: object
            properties:
              message:
                type: string
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    param:
                      type: string
                    msg:
                      type: string

  /auth/verify-reset-password/{token}/{userId}:
    post:
      tags:
        - Authentication
      summary: Verify reset password
      description: Verify reset password
      consumes:
        - application/json
      parameters:
        - in: path
          name: token
          description: Reset token
          required: true
          type: string
        - in: path
          name: userId
          description: User ID
          required: true
          type: string
        - in: body
          name: passwords
          description: New passwords
          schema:
            type: object
            properties:
              newPassword:
                type: string
                format: password
              confirmNewPassword:
                type: string
                format: password
      responses:
        200:
          description: Password updated successfully
          schema:
            type: object
            properties:
              message:
                type: string
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    param:
                      type: string
                    msg:
                      type: string
  /promotions:
    get:
      tags:
        - Promotions
      summary: Get all promotions
      description: Retrieve a list of all promotions
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Promotion"
    post:
      tags:
        - Promotions
      summary: Create a new promotion
      description: Add a new promotion to the system
      parameters:
        - in: body
          name: promotion
          description: Promotion object to be created
          required: true
          schema:
            $ref: "#/definitions/Promotion"
      responses:
        201:
          description: Promotion created successfully
        400:
          description: Invalid input

  /promotions/{id}:
    get:
      tags:
        - Promotions
      summary: Get promotion by ID
      description: Retrieve a promotion by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Promotion ID
      responses:
        200:
          description: Successful operation
          schema:
            $ref: "#/definitions/Promotion"
        404:
          description: Promotion not found

    put:
      tags:
        - Promotions
      summary: Update promotion by ID
      description: Update the details of an existing promotion
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Promotion ID
        - in: body
          name: promotion
          description: Updated promotion object
          required: true
          schema:
            $ref: "#/definitions/Promotion"
      responses:
        200:
          description: Promotion updated successfully
        400:
          description: Invalid input
        404:
          description: Promotion not found

    delete:
      tags:
        - Promotions
      summary: Delete promotion by ID
      description: Remove a promotion from the system
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Promotion ID
      responses:
        200:
          description: Promotion deleted successfully
        404:
          description: Promotion not found

  /cart/{customerId}:
    get:
      tags:
        - Cart
      summary: Get customer's cart
      description: Retrieve the current cart of a customer
      parameters:
        - in: path
          name: customerId
          required: true
          type: string
          description: Customer ID
      responses:
        200:
          description: Cart retrieved successfully
          schema:
            $ref: "#/definitions/Cart"
        404:
          description: Cart not found
  /cart/apply-promotion:
    post:
      tags:
        - Cart
      summary: Apply a promotion code
      description: Apply a discount code to the customer's cart
      parameters:
        - in: body
          name: promotion
          required: true
          schema:
            $ref: "#/definitions/ApplyPromotionRequest"
      responses:
        200:
          description: Promotion applied successfully
        400:
          description: Invalid promotion code or expired
  /cart/add:
    post:
      tags:
        - Cart
      summary: Add a product to the cart
      description: Add a specified quantity of a product to the customer's cart
      parameters:
        - in: body
          name: cartItem
          required: true
          schema:
            $ref: "#/definitions/AddToCartRequest"
      responses:
        200:
          description: Product added to cart successfully
        400:
          description: Invalid input

  /cart/update-quantity:
    put:
      tags: 
      - Cart
      summary: Update the quantity of a product in the cart
      description: Update the quantity of a product in the customer's cart
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              customerId:
                type: string
                description: Customer ID
              productId:
                type: string
                description: Product ID
              quantity:
                type: integer
                minimum: 1
                description: New quantity of the product
            required:
              - customerId
              - productId
              - quantity
      responses:
        200:
          description: Product quantity updated successfully
        400:
          description: Invalid quantity value
        404:
          description: Product not found

        
  /cart/remove-item:
    put:
      tags:
        - Cart
      summary: Remove a product from the cart
      description: Remove a product from the customer's cart
      parameters:
        - in: query
          name: customerId
          required: true
          type: string
          description: Customer ID
        - in: query
          name: productId
          required: true
          type: string
          description: Product ID
      responses:
        200:
          description: Product removed from cart successfully
        404:
          description: Product not found
  /cart/clear:
    post:
      tags:
        - Cart
      summary: Clear the cart
      description: Remove all items from the customer's cart
      parameters:
        - in: query
          name: customerId
          required: true
          type: string
          description: Customer ID
      responses:
        200:
          description: Cart cleared successfully
        404:
          description: Cart not found

  /products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve a list of all products
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"
        500:
          description: Internal server error

    post:
      tags:
        - Products
      summary: Create a new product
      description: Add a new product to the database
      parameters:
        - in: body
          name: product
          description: Product object to be created
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        201:
          description: Product created successfully
        400:
          description: Invalid input
        500:
          description: Internal server error

  /products/updateDiscount/{id}:
    put:
      tags:
        - Products
      summary: Update product discount by ID
      description: Update the discount percentage of an existing product
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Product ID
        - in: body
          name: discount
          description: Updated discount details
          required: true
          schema:
            type: object
            properties:
              discountPercent:
                type: number
                format: float
                description: Discount percentage for the product
      responses:
        200:
          description: Discount updated successfully
        400:
          description: Invalid request
        404:
          description: Product not found
  /products/top-sell:
    get:
      tags:
        - Products
      summary: Get top Products
      description: Get top 10 Products
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"
        500:
          description: Internal server error

  /products/category/{category}:
    get:
      tags:
        - Products
      summary: Get Product by category
      description: Retreve products by them category
      parameters:
        - in : path 
          name : category
          required: true
          type: string
      responses:
         200:
          description: Successful operation
          schema:
            $ref: "#/definitions/Product"
         404:
          description: Product not found
         500:
          description: Internal server error 
  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve a product by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Product ID
      responses:
        200:
          description: Successful operation
          schema:
            $ref: "#/definitions/Product"
        404:
          description: Product not found
        500:
          description: Internal server error

    put:
      tags:
        - Products
      summary: Update product by ID
      description: Update the details of an existing product
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Product ID
        - in: body
          name: product
          description: Updated product object
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        200:
          description: Product updated successfully
        400:
          description: Invalid input
        404:
          description: Product not found
        500:
          description: Internal server error

    delete:
      tags:
        - Products
      summary: Delete product by ID
      description: Remove a product from the database
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Product ID
      responses:
        200:
          description: Product deleted successfully
        404:
          description: Product not found
        500:
          description: Internal server error

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users from the system.
      operationId: getAllUsers
      produces:
        - application/json
      security:
        - Bearer: []
      responses:
        200:
          description: Users retrieved successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Get all users successfully"
              data:
                type: array
                items:
                  $ref: "#/definitions/User"
        404:
          description: No users found
          schema:
            type: object
            properties:
              message:
                type: string
                example: "No users found"
        500:
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Internal server error"

  /users/customerId/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a user by their ID
      parameters:
        - in: path
          name: userId
          required: true
          type: string
          description: User ID
      responses:
        200:
          description: Get user by ID successfully
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                $ref: "#/definitions/CustomerId"
        404:
          description: User not found
          schema:
            type: object
            properties:
              message:
                type: string
        500:
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a user by their ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: User ID
      responses:
        200:
          description: Get user by ID successfully
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                $ref: "#/definitions/User"
        404:
          description: User not found
          schema:
            type: object
            properties:
              message:
                type: string
        500:
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string

    put:
      tags:
        - Users
      summary: Update user by ID
      description: Update the details of an existing user
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: User ID
        - in: body
          name: user
          description: Updated user object
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Update user by ID successfully
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                $ref: "#/definitions/User"
        404:
          description: User not found
          schema:
            type: object
            properties:
              message:
                type: string
        500:
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string

  /users/create-employee:
    post:
      tags:
        - Users
      summary: Create a new employee
      description: Add a new employee to the system
      parameters:
        - in: body
          name: employee
          description: Employee object to be created
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: Employee created successfully
        400:
          description: Invalid input

  /users/delete/{id}:
    put:
      tags:
        - Users
      summary: Delete user by ID
      description: Remove a user from the system
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: User ID
      responses:
        200:
          description: User deleted successfully
        404:
          description: User not found
        500:
          description: Internal server error

  /questions:
    get:
      tags:
        - Quiz
      summary: Get all questions
      description: Retrieve a list of all quiz questions
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Question"
        500:
          description: Internal server error

  /questions/answers/{questionId}:
    get:
      tags:
        - Quiz
      summary: Get answers for a specific question
      parameters:
        - name: questionId
          in: path
          required: true
          type: string
          description: ID of the question
      responses:
        200:
          description: Successful operation
          schema:
            $ref: "#/definitions/Answer"
        404:
          description: Question not found
        500:
          description: Internal server error

  /questions/results/{userId}:
    get:
      tags:
        - Quiz
      summary: Get quiz results for a user
      parameters:
        - name: userId
          in: path
          required: true
          type: string
          description: ID of the user
      responses:
        200:
          description: Successful operation
          schema:
            $ref: "#/definitions/QuizResult"
        404:
          description: User not found
        500:
          description: Internal server error

  /questions/create:
    post:
      tags:
        - Quiz
      summary: Create a new question
      parameters:
        - in: body
          name: question
          required: true
          schema:
            $ref: "#/definitions/QuestionInput"
      responses:
        201:
          description: Question created successfully
        400:
          description: Invalid input
        500:
          description: Internal server error

  /questions/submit:
    post:
      tags:
        - Quiz
      summary: Submit an answer to a question
      parameters:
        - in: body
          name: submission
          required: true
          schema:
            $ref: "#/definitions/QuizSubmission"
      responses:
        200:
          description: Answer submitted successfully
        400:
          description: Invalid submission
        500:
          description: Internal server error

  /questions/update/{questionId}:
    put:
      tags:
        - Quiz
      summary: Update an existing question
      parameters:
        - name: questionId
          in: path
          required: true
          type: string
          description: ID of the question to update
        - in: body
          name: question
          required: true
          schema:
            $ref: "#/definitions/QuestionInput"
      responses:
        200:
          description: Question updated successfully
        404:
          description: Question not found
        500:
          description: Internal server error

  /questions/delete/{questionId}:
    put:
      tags:
        - Quiz
      summary: Delete a question (soft delete)
      parameters:
        - name: questionId
          in: path
          required: true
          type: string
          description: ID of the question to delete
      responses:
        200:
          description: Question deleted successfully
        404:
          description: Question not found
        500:
          description: Internal server error
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Internal server error"
  /orders/create:
    post:
      tags:
        - Orders
      summary: Tạo đơn hàng mới
      description: Tạo đơn hàng mới từ giỏ hàng và thông tin khách hàng
      security:
        - Bearer: []
      parameters:
        - in: body
          name: order
          required: true
          description: Thông tin đơn hàng
          schema:
            type: object
            required:
              - customerId
              - payment_method
              - address
              - phone
            properties:
              customerId:
                type: string
                example: "64df0bf4123abc456d789ef0"
              payment_method:
                type: string
                enum: [Cash, PayPal, CreditCard]
                example: "PayPal"
              address:
                type: string
                example: "123 Đường ABC, Quận 1, Thành phố Hồ Chí Minh"
              phone:
                type: string
                example: "0987654321"
      responses:
        201:
          description: Đơn hàng được tạo thành công
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Order created successfully"
              order:
                type: object
                properties:
                  _id:
                    type: string
                    example: "650123abcdef4567890"
                  customerId:
                    type: string
                    example: "64df0bf4123abc456d789ef0"
                  payment_method:
                    type: string
                    example: "PayPal"
                  totalPrice:
                    type: number
                    example: 250.5
                  payment_status:
                    type: string
                    example: "Pending"
              shipping:
                type: object
                properties:
                  order_id:
                    type: string
                    example: "650123abcdef4567890"
                  address:
                    type: string
                    example: "123 Đường ABC, Quận 1, TP. HCM"
                  phone:
                    type: string
                    example: "0987654321"
                  status:
                    type: string
                    example: "Pending"
              checkoutUrl:
                type: string
                example: "https://checkout.stripe.com/pay/123abc456def"
        400:
          description: Thiếu thông tin bắt buộc
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Missing required fields"
        500:
          description: Lỗi server
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Internal server error"
  /orders:
    get:
      tags:
        - Orders
      summary: Get all orders
      description: Retrieve a list of all orders
      responses:
        200:
          description: A list of orders
          schema:
            type: array
            items:
              $ref: "#/definitions/Order"
        500:
          description: Server error
  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Retrieve order details by its ID
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: Order ID
      responses:
        200:
          description: Order details retrieved successfully
          schema:
            $ref: "#/definitions/Order"
        404:
          description: Order not found
        500:
          description: Server error
    put:
      tags:
        - Orders
      summary: Update order status
      description: Update the status of an order
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: Order ID
        - in: body
          name: order
          description: Updated order data
          schema:
            type: object
            properties:
              order_status:
                type: string
                enum: ["Pending Confirmation", "Confirmed", "Success", "Cancelled"]
      responses:
        200:
          description: Order updated successfully
        404:
          description: Order not found
        500:
          description: Server error
    delete:
      tags:
        - Orders
      summary: delete order
      description: delete order by id
      parameters:
        - name : id
          in : path
          required: true
          type: string
          description: Order Id
      responses:
        200:
          description: Order deleted successfully
        404: 
          description: Order not found
        500:
          description: server error    
  /orders/customer/{customerId}:
    get:
      tags:
        - Orders
      summary: Get orders by customer ID
      description: Retrieve orders for a specific customer
      parameters:
        - name: customerId
          in: path
          required: true
          type: string
          description: Customer ID
      responses:
        200:
          description: Orders retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/Order"
        404:
          description: No orders found for this customer
        500:
          description: Server error
  /shipfees:
    get:
      tags:
        - Ship Fee
      summary: Get all ship fees
      description: Returns a list of all ship fees
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ShipFee'
        500:
          description: Server error
    post:
      tags:
        - Ship Fee
      summary: Create a new ship fee
      description: Create a new ship fee in the system
      consumes:
        - application/json
      parameters:
        - in: body
          name: shipFee
          description: Ship fee information
          schema:
            $ref: '#/definitions/ShipFee'
      responses:
        201:
          description: Ship fee created successfully
          schema:
            $ref: '#/definitions/ShipFee'
        400:
          description: Invalid request
        500:
          description: Server error
  /shipfees/location:
    get:
      tags:
        - Ship Fee
      summary: Get ship fee by location
      description: Returns a ship fee based on location
      parameters:
      - in: query
        name: location
        required: true
        type: string
        description: Location to search

      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ShipFee'
        404:
          description: Ship fee not found
        500:
          description: Server error
  /shipfees/{id}:
    put:
      tags:
        - Ship Fee
      summary: Update ship fee
      description: Update a ship fee by ID
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: Ship fee ID
        - in: body
          name: shipFee
          description: Ship fee data to update
          schema:
            $ref: '#/definitions/ShipFee'
      responses:
        200:
          description: Ship fee updated successfully
        404:
          description: Ship fee not found
        500:
          description: Server error
    delete:
      tags:
        - Ship Fee
      summary: Delete ship fee
      description: Delete a ship fee by ID
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: Ship fee ID
      responses:
        200:
          description: Ship fee deleted successfully
        404:
          description: Ship fee not found
        500:
          description: Server error

  /shippings:
    get:
      tags:
        - "Shipping"
      summary: "Get all shipping records"
      description: "Retrieve a list of all shipping records."
      security:
        - Bearer: []
      responses:
        200:
          description: "List of all shipping records."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Shipping"
  /shippings/update-status/{id}:
    put:
      tags:
        - "Shipping"
      summary: "Update shipping status"
      description: "Update the status of a shipping record by ID."
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          description: "Shipping ID"
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              shipping_status:
                type: "string"
                enum: ["Pending", "Shipped", "Delivered", "Cancelled"]
      responses:
        200:
          description: "Shipping status updated successfully."
        400:
          description: "Invalid request."
  /shippings/update-reason/{id}:
    put:
      tags:
        - "Shipping"
      summary: "Update shipping reason"
      description: "Update the reason for a shipping record by ID."
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          description: "Shipping ID"
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              reason:
                type: "string"
      responses:
        200:
          description: "Shipping reason updated successfully."
        400:
          description: "Invalid request."
  /shippings/order/{order_id}:
    get:
      tags:
        - "Shipping"
      summary: "Get shipping by order ID"
      description: "Retrieve a shipping record by order ID."
      security:
        - Bearer: []
      parameters:
        - name: "order_id"
          in: "path"
          required: true
          type: "string"
          description: "Order ID"
      responses:
        200:
          description: "Shipping record retrieved successfully."
          schema:
            $ref: "#/definitions/Shipping"
        404:
          description: "Shipping record not found."
  /blogs:
    post:
      tags:
        - Blog
      summary: Create a new blog
      description: Create a new blog in the system
      consumes:
        - application/json
      parameters:
        - in: body
          name: blog
          description: Blog information
          schema:
            $ref: '#/definitions/Blog'
      responses:
        201:
          description: Blog created successfully
          schema:
            $ref: '#/definitions/Blog'
        400:
          description: Invalid request
        500:
          description: Server error

    get:
      tags:
        - Blog
      summary: Get all blogs
      description: Returns a list of all blogs
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Blog'
        500:
          description: Server error

  /blogs/{id}:
    get:
      tags:
        - Blog
      summary: Get blog by ID
      description: Returns detailed information of a blog by ID
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: Blog ID
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Blog'
        404:
          description: Blog not found
        500:
          description: Server error

    put:
      tags:
        - Blog
      summary: Update blog
      description: Update blog information by ID
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: Blog ID
        - in: body
          name: blog
          description: Blog data to update
          schema:
            $ref: '#/definitions/Blog'
      responses:
        200:
          description: Blog updated successfully
        404:
          description: Blog not found
        500:
          description: Server error

    delete:
      tags:
        - Blog
      summary: Delete blog
      description: Delete a blog by ID
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: Blog ID
      responses:
        200:
          description: Blog deleted successfully
        404:
          description: Blog not found
        500:
          description: Server error

  /reviews:
    get:
      tags:
        - Reviews
      summary: Get all reviews
      description: Retrieve a list of all reviews
      responses:
        200:
          description: Successfully retrieved list of reviews
          schema:
            type: array
            items:
              $ref: "#/definitions/Review"
    post:
      tags:
        - Reviews
      summary: Create a new review
      description: Add a new review for a product
      consumes:
        - application/json
      parameters:
        - in: body
          name: review
          description: Review object
          schema:
            $ref: "#/definitions/Review"
      responses:
        201:
          description: Review created successfully
          schema:
            $ref: "#/definitions/Review"
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
  /reviews/update-rating/{Id}:
    put:
      tags:
        - Reviews
      summary: Update rating for a product
      description: Modify the rating of a product based on reviews
      consumes:
        - application/json
      parameters:
      - in: path
        name: Id
        required: true
        type: string
        description: ID of the product to update rating
      - in: body
        name: body
        description: New rating and comment values
        required: true
        schema:
          type: object
          properties:
            rating:
              type: number
              description: New rating value
            comment:
              type: string
              description: New comment value
      responses:
        200:
          description: Rating updated successfully
          schema:
            type: object
            properties:
              message:
                type: string
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
  /reviews/{id}:
    get:
      tags: 
        - Reviews
      summary: Get a review by ID
      description: Retrieve a specific review by its ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: ID of the review to retrieve
      responses:
        200:
          description: Successfully retrieved the review
          schema:
            $ref: "#/definitions/Review"
        404:
          description: Review not found
          schema:
            type: object
            properties:
              message:
                type: string
    delete:
      tags:
        - Reviews
      summary: Delete a review
      description: Remove a specific review by ID
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: ID of the review to delete
      responses:
        200:
          description: Review deleted successfully
          schema:
            type: object
            properties:
              message:
                type: string
        404:
          description: Review not found
          schema:
            type: object
            properties:
              message:
                type: string
  /routines/skintype/{skintypeId}:
    get:
      tags:
        - Routine
      summary: Get routines by skin type
      description: Returns a list of routines filtered by skin type ID
      parameters:
        - name: skintypeId
          in: path
          required: true
          type: string
          description: Skin Type ID
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Routine'
        404:
          description: Routines not found
        500:
          description: Server error
  /routines:
    post:
      tags:
        - Routine
      summary: Create a new routine
      description: Create a new routine in the system
      consumes:
        - application/json
      parameters:
        - in: body
          name: routine
          description: Routine information
          schema:
            $ref: '#/definitions/Routine'
      responses:
        201:
          description: Routine created successfully
          schema:
            $ref: '#/definitions/Routine'
        400:
          description: Invalid request
        500:
          description: Server error
  /routines/{id}:
    put:
      tags:
        - Routine
      summary: Update routine
      description: Update routine information by ID
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: Routine ID
        - in: body
          name: routine
          description: Routine data to update
          schema:
            $ref: '#/definitions/Routine'
      responses:
        200:
          description: Routine updated successfully
        404:
          description: Routine not found
        500:
          description: Server error

    delete:
      tags:
        - Routine
      summary: Delete routine
      description: Delete a routine by ID
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: Routine ID
      responses:
        200:
          description: Routine deleted successfully
        404:
          description: Routine not found
        500:
          description: Server error\
  /address/province:
    get:
      tags:
        - Address
      summary: Get all addresses
      description: Retrieve a list of all addresses
      responses:
        200:
          description: A list of addresses
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string

  /address:
    get:
      tags:
        - Address
      summary: Get all addresses
      description: Retrieve a list of all addresses
      responses:
        200:
          description: A list of addresses
          schema:
            type: array
            items:
              type: object
              properties:
                _id:
                  type: string
                province:
                  type: string
                district:
                  type: string
                ward:
                  type: string
                street:
                  type: string
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
    post:
      tags:
        - Address
      summary: Create a new address
      description: Add a new address to the system
      consumes:
        - application/json
      parameters:
        - in: body
          name: address
          description: Address object to be created
          required: true
          schema:
            type: object
            properties:
              province:
                type: string
                example: "Hanoi"
              district:
                type: string
                example: "Ba Dinh"
              ward:
                type: string
                example: "Kim Ma"
              street:
                type: string
                example: "123 Kim Ma Street"
      responses:
        201:
          description: Address created successfully
          schema:
            type: object
            properties:
              _id:
                type: string
              province:
                type: string
              district:
                type: string
              ward:
                type: string
              street:
                type: string
              createdAt:
                type: string
                format: date-time
              updatedAt:
                type: string
                format: date-time
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
  /address/wards/{district}:
    get:
      tags:
        - Address
      summary: Get wards by district
      description: Retrieve a list of wards based on the district
      parameters:
        - in: path
          name: district
          required: true
          type: string
          description: The district name
      responses:
        200:
          description: A list of wards in the district
          schema:
            type: array
            items:
              type: object
              properties:
                ward:
                  type: string
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string

  /address/districts/{province}:
    get:
      tags:
        - Address
      summary: Get districts by province
      description: Retrieve a list of districts based on the province
      parameters:
        - in: path
          name: province
          required: true
          type: string
          description: The province name
      responses:
        200:
          description: A list of districts in the province
          schema:
            type: array
            items:
              type: object
              properties:
                district:
                  type: string
        400:
          description: Bad request
          schema:
            type: object
            properties:
              message:
                type: string
  
  
definitions:
  Order:
    type: object
    properties:
      _id:
        type: string
      customer_id:
        type: string
      items:
        type: array
        items:
          $ref: "#/definitions/OrderItem"
      totalPrice:
        type: number
      discount:
        type: number
      descriptions:
        type: string
      finalPrice:
        type: number
      order_status:
        type: string
        enum: ["Pending Confirmation", "Confirmed", "Completed", "Cancelled"]
      payment_method:
        type: string
        enum: ["PayPal", "Cash"]
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
  OrderItem:
    type: object
    properties:
      product_id:
        type: string
      quantity:
        type: integer
      priceAtTime:
        type: number

  ShipFee:
    type: object
    properties:
      location:
        type: string
        example: 'New York'
      price:
        type: number
        example: 5.99
  Product:
    type: object
    properties:
      name:
        type: string
        example: "Facial Cleanser"
      ingredient:
        type: string
        example: "Aloe Vera, Vitamin E"
      category:
        type: string
        example: "Skincare"
      discountPercentage:
        type: number
        example: 0
      skinType:
        type: string
        example: "64e9f8c8b4d6c5a2f4d8e7f1" 
      stock:
        type: integer
        example: 100
      image:
        type: string
        example: "https://example.com/product.jpg"
      rating:
        type: number
        format: float
        example: 0
      purchaseCount:
        type: integer
        example: 0
      description:
        type: string
        example: "A gentle cleanser for all skin types."
      isDisabled:
        type: boolean
        example: false
      price:
        type: number
        example: 19.99

  CustomerId: 
    type: string 
  User:
    type: object
    properties:
      _id:
        type: string
      email:
        type: string
      password:
        type: string
      __v:
        type: integer
  Promotion:
    type: object
    properties:
      name:
        type: string
        example: "Holiday Sale"
      code:
        type: string
        example: "HOLIDAY20"
      description:
        type: string
        example: "20% off for the holiday season"
      discount_percentage:
        type: number
        format: float
        example: 20.0
      start_date:
        type: string
        format: date-time
        example: "2025-02-01T00:00:00Z"
      end_date:
        type: string
        format: date-time
        example: "2025-02-28T23:59:59Z"
  CartItem:
    type: object
    properties:
      productId:
        type: string
        example: "60d5f9b5fc13ae21b8000000"
      quantity:
        type: integer
        example: 2
      priceAtTime:
        type: number
        example: 19.99

  Cart:
    type: object
    properties:
      customerId:
        type: string
        example: "60d5f9b5fc13ae21b8000001"
      items:
        type: array
        items:
          $ref: "#/definitions/CartItem"
      totalPrice:
        type: number
        example: 39.98
      discount:
        type: number
        example: 5.00
      finalPrice:
        type: number
        example: 34.98

  AddToCartRequest:
    type: object
    properties:
      customerId:
        type: string
        example: "60d5f9b5fc13ae21b8000001"
      productId:
        type: string
        example: "60d5f9b5fc13ae21b8000000"
      quantity:
        type: integer
        example: 1
  ApplyPromotionRequest:
    type: object
    properties:
      customerId:
        type: string
        example: "60d5f9b5fc13ae21b8000001"
      promoCode:
        type: string
        example: "DISCOUNT10"
  Question:
    type: object
    properties:
      _id:
        type: string
      text:
        type: string
      options:
        type: array
        items:
          type: string

  Answer:
    type: object
    properties:
      _id:
        type: string
      questionId:
        type: string
      text:
        type: string
      isCorrect:
        type: boolean

  Shipping:
    type: "object"
    properties:
      _id:
        type: "string"
      order_id:
        type: "string"
      shipping_address:
        type: "string"
      shipping_phone:
        type: "string"
      shipping_status:
        type: "string"
        enum: ["Pending", "Shipped", "Delivered", "Cancelled"]
      reason:
        type: "string"
      delivery_date:
        type: "string"
        format: "date-time"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
  QuestionInput:
    type: object
    required:
      - text
      - options
      - correctAnswer
    properties:
      text:
        type: string
      options:
        type: array
        items:
          type: string
      correctAnswer:
        type: string

  QuizSubmission:
    type: object
    required:
      - questionId
      - userId
      - answer
    properties:
      questionId:
        type: string
      userId:
        type: string
      answer:
        type: string

  QuizResult:
    type: object
    properties:
      userId:
        type: string
      totalQuestions:
        type: integer
      correctAnswers:
        type: integer
      score:
        type: number
      completedAt:
        type: string
        format: date-time
  Review:
    type: object
    properties:
      customer_id:
        type: string
        example: "64f8c2a1b3a4e5d6f7g8h9i0"
      product_id:
        type: string
        example: "7g8h9i0j1k2l3m4n5o6p7q8r"
      rating:
        type: number
        format: float
        example: 4.5
      comment:
        type: string
        example: "Great product! Very satisfied."
      createdAt:
        type: string
        format: date-time
        example: "2025-02-19T12:00:00Z"
      updatedAt:
        type: string
        format: date-time
        example: "2025-02-19T14:00:00Z"
  Blog:
    type: object
    properties:
      user_id:
        type: string
        description: ID of the user who created the blog
        example: "12345"
      title:
        type: string
        description: Blog title
        example: "Guide to Writing Blogs with Node.js"
      content:
        type: string
        description: Detailed content of the blog
        example: "The detailed content of the article..."
      image:
        type: string
        description: URL of the blog image
        example: "https://example.com/image.jpg"
  Routine:
    type: object
    required:
      - skinType
      - step
    properties:
      skinType:
        type: string
        description: The ID of the associated skin type
      steps:
        type: array
        items:
          type: object
          properties:
            stepNumber:
              type: integer
              description: Step number in the routine
            title:
              type: string
              description: Title of the step
            description:
              type: string
              description: Description of the step
            recommendProducts:
              type: array
              items:
                type: string
                description: Product ID